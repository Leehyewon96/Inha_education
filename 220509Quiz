#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum menu {INPUT, OUTPUT, SEARCH, QUIT};

typedef struct profile
{
    int id;
    char name[10];
    int kor, eng, math, sum;
    double avg;
    char grade;
}Profile;

void InputInfo(Profile* ary);
void OutputInfo(Profile* prr);
void SearchInfo(Profile *p);
void CalGrade(Profile *p);

int main()
{
    enum menu Menu;
    int flag = 1;
    Profile student;
    Profile* list = (Profile *)calloc(1, sizeof(list));
    const Profile* start = list;

    while(flag)
    {
        printf("INPUT(0), OUTPUT(1), SEARCH(2), QUIT(3) 메뉴를 선택하세요");
        scanf("%d", &Menu);

        switch(Menu)
        {
            case 0:
                InputInfo(list);
                break;
            case 1:
                OutputInfo(list);
                break;
            case 2:
                SearchInfo(list);
                break;
            case 3:
                free(list);
                flag = 0;
                break;
        }
    }
}

void InputInfo(Profile* ary)
{
    printf("=================학생의 정보를 입력합니다.=================\n");
    int tempID;
    int cnt = 0;
    printf("학생의 학번을 입력하세요 : ");
    scanf("%d", &tempID);

    // 학번 중복 검사
    while((ary + cnt)->id != NULL)
    {
        if((ary + cnt)->id == tempID)
        {
            printf("이미 존재하는 학번입니다. 다시 입력하세요.");
            scanf("%d", &tempID);
            cnt = -1;
        }
        cnt++;
    }
    (ary + cnt)->id = tempID;
    
    printf("학생의 이름을 입력하세요 : ");
    scanf("%s", (ary + cnt)->name);
    printf("학생의 국어, 영어, 수학 점수를 입력하세요 : ");
    scanf("%d %d %d", &(ary + cnt)->kor, &(ary + cnt)->eng, &(ary + cnt)->math);
    (ary + cnt)->sum = (ary + cnt)->kor + (ary + cnt)->eng + (ary + cnt)->math;
    (ary + cnt)->avg = ((ary + cnt)->sum / 3.0);

    CalGrade(ary + cnt); // 학점 저장

    //성적순 정렬
    for(int i = 0; i <= cnt - 1; i++)
    {
        if((ary + cnt)->avg > (ary + i)->avg)
        {
            Profile temp = *(ary + cnt);
            for(int j = cnt-1; j >= i; j--)
            {
               *(ary + j + 1) = *(ary + j);
            }
            *(ary + i) = temp;
            break;
        }
    }
}

void OutputInfo(Profile* prr)
{
    printf("=============학생의 정보를 출력합니다.=============\n");
    int cnt = 0;
    printf("   학번      이름   국어  영어  수학  총점 평균 학점\n");
    while((prr+cnt)->id != NULL)
    {
        printf("%5d %10s %5d %5d %5d %5d %5.1lf %3c\n", (prr + cnt)->id, (prr + cnt)->name, (prr + cnt)->kor, (prr + cnt)->eng, (prr + cnt)->math, (prr + cnt)->sum, (prr + cnt)->avg, (prr + cnt)->grade);
        cnt++;
    }
}

void SearchInfo(Profile *p)
{
    printf("=============학생의 정보를 검색합니다.=============\n");
    printf("조회할 학생의 이름을 입력하세요.");
    char fname[10];
    scanf("%s", fname);

    int cnt = 0;
    while((p + cnt)->name != NULL)
    {
        int size = sizeof(p) / sizeof(p+1);
        if(strcmp((p + cnt)->name, fname) == 0)
        {
            printf("학생의 학점은 %c, 평균은 %3.1lf입니다.\n", (p + cnt)->grade, (p + cnt)->avg);
            cnt = 0;
            break;
        }
        else if(cnt > size)
        {
            printf("해당 학생의 이름이 명단에 존재하지 않습니다. 다시 입력해주세요.");
            char Tname[10];
            scanf("%s", Tname);
            strcpy(fname, Tname);
            cnt = -1;
        }
        cnt++;
    }
}

void CalGrade(Profile *p)
{
    int Avg = p->avg / 10;

    switch(Avg)
    {
        case 9:
            p->grade = 'A';
            break;
        case 8:
            p->grade = 'B';
            break;
        case 7:
            p->grade = 'C';
            break;
        default:
            p->grade = 'F';
            break;
    }
}
